"use strict";(self.webpackChunkaninfo_web_catedra=self.webpackChunkaninfo_web_catedra||[]).push([[691],{6495:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=n(5893),r=n(3905);const i={sidebar_position:2},c="Bash",o={id:"Material/Apuntes/bash",title:"Bash",description:"Gracias Sofi!!!!!!",source:"@site/docs/Material/Apuntes/bash.md",sourceDirName:"Material/Apuntes",slug:"/Material/Apuntes/bash",permalink:"/web/docs/Material/Apuntes/bash",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Linux",permalink:"/web/docs/Material/Apuntes/Introducci\xf3n a Linux"},next:{title:"C\xf3mo configurar tu SSH Key",permalink:"/web/docs/Material/Apuntes/configurar-ssh-key"}},l={},d=[{value:"Gracias Sofi!!!!!!",id:"gracias-sofi",level:4},{value:"Int\xe9rprete de comandos",id:"int\xe9rprete-de-comandos",level:2},{value:"Funcionamiento b\xe1sico",id:"funcionamiento-b\xe1sico",level:4},{value:"Entrada y salida en Bash",id:"entrada-y-salida-en-bash",level:4},{value:"Caracter\xedsticas avanzadas del int\xe9rprete de comandos",id:"caracter\xedsticas-avanzadas-del-int\xe9rprete-de-comandos",level:3},{value:"Expansiones de terminal",id:"expansiones-de-terminal",level:4},{value:"Expansi\xf3n de variables con <code>$</code>",id:"expansi\xf3n-de-variables-con-",level:4},{value:"Expansi\xf3n con <code>!</code>",id:"expansi\xf3n-con-",level:4},{value:"Redirecci\xf3n y pipelines",id:"redirecci\xf3n-y-pipelines",level:3},{value:"Redirecci\xf3n de salida (&gt; y &gt;&gt;)",id:"redirecci\xf3n-de-salida--y-",level:4},{value:"Uso de <code>cat</code> para copiar y concatenar archivos",id:"uso-de-cat-para-copiar-y-concatenar-archivos",level:3},{value:"Copiar archivos",id:"copiar-archivos",level:4},{value:"Concatenar archivos",id:"concatenar-archivos",level:4},{value:"Escritura interactiva con <code>cat</code>",id:"escritura-interactiva-con-cat",level:4},{value:"Redirecci\xf3n de entrada (<code>&lt;</code>)",id:"redirecci\xf3n-de-entrada-",level:4},{value:"Pipelines (<code>|</code>)",id:"pipelines-",level:3},{value:"Ejemplos de uso:",id:"ejemplos-de-uso",level:4},{value:"Lenguaje de Scripting",id:"lenguaje-de-scripting",level:2},{value:"Variables y Redirecci\xf3n",id:"variables-y-redirecci\xf3n",level:4},{value:"Estructuras de Control",id:"estructuras-de-control",level:4},{value:"Input del Usuario",id:"input-del-usuario",level:4},{value:"Variables",id:"variables",level:2},{value:"Definici\xf3n de Variables",id:"definici\xf3n-de-variables",level:3},{value:"Acceso a Variables",id:"acceso-a-variables",level:4},{value:"Variables de Entorno",id:"variables-de-entorno",level:3},{value:"Asignaci\xf3n de Resultados de Comandos a Variables",id:"asignaci\xf3n-de-resultados-de-comandos-a-variables",level:3},{value:"Variables Temporales",id:"variables-temporales",level:3},{value:"Variables Especiales",id:"variables-especiales",level:3},{value:"Declaraci\xf3n de Variables de s\xf3lo Lectura",id:"declaraci\xf3n-de-variables-de-s\xf3lo-lectura",level:3},{value:"Eliminar Variables",id:"eliminar-variables",level:3},{value:"Estructuras Condicionales e Iterativas",id:"estructuras-condicionales-e-iterativas",level:2},{value:"<code>if</code>",id:"if",level:3},{value:"Comparaciones en <code>if</code>",id:"comparaciones-en-if",level:4},{value:"<code>for</code>",id:"for",level:3},{value:"<code>while</code>",id:"while",level:3},{value:"<code>Case</code>",id:"case",level:3},{value:"<code>Until</code>",id:"until",level:3},{value:"Funciones",id:"funciones",level:2},{value:"Llamar a una funci\xf3n",id:"llamar-a-una-funci\xf3n",level:4},{value:"Retorno de valores",id:"retorno-de-valores",level:4},{value:"Uso de variables locales",id:"uso-de-variables-locales",level:4}];function t(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.ah)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"bash",children:"Bash"})}),"\n",(0,s.jsx)(a.h4,{id:"gracias-sofi",children:"Gracias Sofi!!!!!!"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Bash (Bourne Again Shell)"}),' es un int\xe9rprete de comandos y un lenguaje de scripting muy popular en sistemas operativos basados en Unix, como Linux y macOS. Su nombre, "Bourne Again Shell", es un gui\xf1o al Bourne Shell (',(0,s.jsx)(a.code,{children:"sh"}),"), el shell original creado por Stephen Bourne en los a\xf1os 70, al que Bash mejora con varias caracter\xedsticas nuevas y \xfatiles."]}),"\n",(0,s.jsx)(a.h1,{id:"caracter\xedsticas-claves-de-bash",children:"Caracter\xedsticas claves de Bash"}),"\n",(0,s.jsx)(a.h2,{id:"int\xe9rprete-de-comandos",children:"Int\xe9rprete de comandos"}),"\n",(0,s.jsx)(a.p,{children:"Un int\xe9rprete de comandos es un programa que lee y ejecuta comandos ingresados por el usuario. En el contexto de Bash, este int\xe9rprete act\xfaa como un puente entre el usuario y el sistema operativo, permiti\xe9ndote ejecutar tareas y controlar el sistema mediante comandos escritos en texto."}),"\n",(0,s.jsx)(a.h4,{id:"funcionamiento-b\xe1sico",children:"Funcionamiento b\xe1sico"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Entrada de Comandos"}),": Cuando abr\xeds una terminal en tu sistema, se inicia una sesi\xf3n de Bash. Ah\xed pod\xe9s escribir comandos que el int\xe9rprete lee l\xednea por l\xednea. Por ejemplo, pod\xe9s escribir ",(0,s.jsx)(a.code,{children:"ls"})," para listar los archivos en un directorio o ",(0,s.jsx)(a.code,{children:"cd"})," para cambiar de directorio."]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Procesamiento de Comandos"}),": Bash recibe el comando, lo interpreta y lo convierte en acciones que el sistema operativo puede ejecutar. Por ejemplo, cuando escrib\xeds ",(0,s.jsx)(a.code,{children:"mkdir nueva_carpeta"}),', Bash interpreta esto como una solicitud para crear un nuevo directorio llamado "nueva_carpeta".']}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Ejecuci\xf3n"}),": Despu\xe9s de interpretar el comando, Bash lo pasa al sistema operativo para que lo ejecute. El sistema operativo realiza la acci\xf3n solicitada y luego Bash muestra el resultado o el output en la terminal."]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Retorno de Resultados"}),": Tras ejecutar el comando, Bash muestra el resultado de la operaci\xf3n en la terminal. Si el comando fue exitoso, ver\xe1s los resultados esperados; si hubo un error, se mostrar\xe1 un mensaje de error."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"entrada-y-salida-en-bash",children:"Entrada y salida en Bash"}),"\n",(0,s.jsxs)(a.p,{children:["En Bash, la comunicaci\xf3n entre los procesos se maneja a trav\xe9s de tres flujos est\xe1ndar: ",(0,s.jsx)(a.code,{children:"stdin"})," (entrada est\xe1ndar), ",(0,s.jsx)(a.code,{children:"stdout"})," (salida est\xe1ndar) y ",(0,s.jsx)(a.code,{children:"stderr"})," (error est\xe1ndar). Estos flujos permiten la interacci\xf3n entre el usuario, los comandos y el sistema operativo."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"stdin (Entrada Est\xe1ndar)"}),": Es el flujo a trav\xe9s del cual los comandos reciben datos. Por defecto, ",(0,s.jsx)(a.code,{children:"stdin"})," proviene del teclado, pero pod\xe9s redirigir la entrada desde un archivo o desde otro comando (se da explicaci\xf3n de estas redirecciones m\xe1s adelante en este documento)."]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"stdout (Salida Est\xe1ndar)"}),": Es el flujo a trav\xe9s del cual los comandos env\xedan datos que deber\xedan mostrarse al usuario. Por defecto, ",(0,s.jsx)(a.code,{children:"stdout"})," se muestra en la terminal, pero pod\xe9s redirigir la salida a un archivo."]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"stderr (Error Est\xe1ndar)"}),": Es el flujo a trav\xe9s del cual los comandos env\xedan mensajes de error. Por defecto, ",(0,s.jsx)(a.code,{children:"stderr"})," tambi\xe9n se muestra en la terminal, pero pod\xe9s redirigir los mensajes de error a un archivo separado."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"caracter\xedsticas-avanzadas-del-int\xe9rprete-de-comandos",children:"Caracter\xedsticas avanzadas del int\xe9rprete de comandos"}),"\n",(0,s.jsx)(a.h4,{id:"expansiones-de-terminal",children:"Expansiones de terminal"}),"\n",(0,s.jsx)(a.p,{children:"En Bash, las expansiones son una caracter\xedstica muy \xfatil que permite cambiar algo que escrib\xeds por otra cosa antes de ejecutar el comando. Aunque la expansi\xf3n cambia el comando, este reemplazo no se muestra expl\xedcitamente en la terminal."}),"\n",(0,s.jsxs)(a.h4,{id:"expansi\xf3n-de-variables-con-",children:["Expansi\xf3n de variables con ",(0,s.jsx)(a.code,{children:"$"})]}),"\n",(0,s.jsxs)(a.p,{children:["Usar ",(0,s.jsx)(a.code,{children:"$"})," seguido del nombre de una variable o alias la expande y reemplaza con su valor. Esto tambi\xe9n te permite ejecutar comandos dentro de otros comandos. Por ejemplo:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "El contenido del archivo es $(cat archivo.txt)"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este caso, ",(0,s.jsx)(a.code,{children:"$(cat archivo.txt)"})," se expande para mostrar el contenido del archivo en lugar del comando en s\xed. Tambi\xe9n pod\xe9s usar comillas invertidas ",(0,s.jsx)(a.code,{children:"`"})," en lugar de ",(0,s.jsx)(a.code,{children:"$(...)"})," para ejecutar comandos dentro de otros comandos."]}),"\n",(0,s.jsxs)(a.h4,{id:"expansi\xf3n-con-",children:["Expansi\xf3n con ",(0,s.jsx)(a.code,{children:"!"})]}),"\n",(0,s.jsxs)(a.p,{children:["El signo ",(0,s.jsx)(a.code,{children:"!"})," reemplaza el texto por el \xfaltimo comando ejecutado que comience con lo que sigue al signo de exclamaci\xf3n. Esto es \xfatil para reutilizar comandos anteriores sin tener que reescribirlos. Por ejemplo:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"!ls\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Esto ejecutar\xe1 el \xfaltimo comando que comience con ",(0,s.jsx)(a.code,{children:"ls"}),". Pod\xe9s leer m\xe1s sobre esto en este art\xedculo: ",(0,s.jsx)(a.a,{href:"https://blog.wemake.pe/posts/usando-el-signo-de-exclamacion-para-simplificar-los-comandos/",children:"https://blog.wemake.pe/posts/usando-el-signo-de-exclamacion-para-simplificar-los-comandos/"}),"."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"!!"}),": Expande y ejecuta el \xfaltimo comando completo que fue ejecutado. Es muy \xfatil cuando olvid\xe1s anteponer ",(0,s.jsx)(a.code,{children:"sudo"})," a un comando que requiere permisos de root:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"sudo !!\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.p,{children:["Esto repetir\xe1 el \xfaltimo comando ejecutado, pero con ",(0,s.jsx)(a.code,{children:"sudo"})," al principio."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"$?"}),": Esta expansi\xf3n reemplaza con el c\xf3digo de salida del \xfaltimo programa ejecutado. Es \xfatil para verificar si un comando se ejecut\xf3 correctamente (0 significa \xe9xito)."]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"$@"}),": Esta variable especial expande cada argumento pasado al script como una cadena separada. ",(0,s.jsx)(a.code,{children:"$@"})," se utiliza com\xfanmente para iterar sobre todos los argumentos, como en un bucle ",(0,s.jsx)(a.code,{children:"for"}),". Cada argumento se considera como una cadena separada, por lo que ",(0,s.jsx)(a.code,{children:"$@"})," proporciona una lista de todos los argumentos pasados al script."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Protecci\xf3n de expansi\xf3n con comillas simples y backslashes"}),":"]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["Si no quer\xe9s que algo se expanda dentro de una cadena, pod\xe9s usar comillas simples (",(0,s.jsx)(a.code,{children:"' '"}),"). Todo lo que est\xe9 entre comillas simples no se expande."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"echo 'El valor de $nombre no se expandir\xe1'\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.p,{children:["Adem\xe1s, pod\xe9s usar un backslash (",(0,s.jsx)(a.code,{children:"\\"}),") antes de una expansi\xf3n para evitar que ocurra. Esto es \xfatil si quer\xe9s mostrar un car\xe1cter especial literalmente:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"echo \\$nombre\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Operaciones aritm\xe9ticas"}),": Bash permite realizar operaciones aritm\xe9ticas dentro de dobles par\xe9ntesis ",(0,s.jsx)(a.code,{children:"(( ))"}),"."]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"redirecci\xf3n-y-pipelines",children:"Redirecci\xf3n y pipelines"}),"\n",(0,s.jsx)(a.p,{children:"En Bash, las redirecciones y los pipelines son herramientas esenciales que te permiten controlar y manipular el flujo de datos entre comandos y archivos. Estos mecanismos son fundamentales para crear scripts eficientes, ya que te permiten encadenar comandos y redirigir su entrada y salida de manera flexible."}),"\n",(0,s.jsx)(a.h4,{id:"redirecci\xf3n-de-salida--y-",children:"Redirecci\xf3n de salida (> y >>)"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:">"}),": Si utiliz\xe1s ",(0,s.jsx)(a.code,{children:">"})," despu\xe9s de un comando seguido del nombre de un archivo, lo que hace es enviar todo lo que el comando imprimir\xeda en la terminal (su salida est\xe1ndar) al archivo especificado. Sin embargo, si el archivo ya existe, lo sobreescribe completamente."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "Hola Mundo" > saludo.txt\n'})}),"\n",(0,s.jsx)(a.p,{children:'En este ejemplo, se crea un archivo llamado saludo.txt (si no existe) y se guarda el texto "Hola Mundo" en \xe9l. Si saludo.txt ya exist\xeda, su contenido anterior se perder\xe1, ya que ser\xe1 sobrescrito por "Hola Mundo".'}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:">>"}),": Si utiliz\xe1s >>, realiza una funci\xf3n similar, pero en lugar de sobrescribir el archivo, agrega el contenido al final del archivo existente. Esto es \xfatil cuando quer\xe9s acumular informaci\xf3n en un archivo."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "Hola otra vez" >> saludo.txt\n'})}),"\n",(0,s.jsxs)(a.p,{children:['Ac\xe1, el texto "Hola otra vez" se agrega al final del archivo ',(0,s.jsx)(a.code,{children:"saludo.txt"}),", preservando cualquier contenido previo."]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Nota:"})," Ambos operadores (",(0,s.jsx)(a.code,{children:">"})," y ",(0,s.jsx)(a.code,{children:">>"}),") crear\xe1n el archivo si no existe."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.h3,{id:"uso-de-cat-para-copiar-y-concatenar-archivos",children:["Uso de ",(0,s.jsx)(a.code,{children:"cat"})," para copiar y concatenar archivos"]}),"\n",(0,s.jsx)(a.h4,{id:"copiar-archivos",children:"Copiar archivos"}),"\n",(0,s.jsxs)(a.p,{children:["Pod\xe9s usar ",(0,s.jsx)(a.code,{children:"cat"})," (que concatena y muestra archivos) junto con ",(0,s.jsx)(a.code,{children:">"})," para copiar el contenido de un archivo en otro. Por ejemplo:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"cat archivo_original.txt > copia_archivo.txt\n"})}),"\n",(0,s.jsx)(a.p,{children:"Este comando copiar\xe1 el contenido de archivo_original.txt en copia_archivo.txt. Si copia_archivo.txt ya existe, ser\xe1 sobrescrito."}),"\n",(0,s.jsx)(a.h4,{id:"concatenar-archivos",children:"Concatenar archivos"}),"\n",(0,s.jsxs)(a.p,{children:["Pod\xe9s combinar varios archivos en uno solo utilizando ",(0,s.jsx)(a.code,{children:"cat"})," y ",(0,s.jsx)(a.code,{children:">"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"cat archivo_1.txt archivo_2.txt > archivo_combinado.txt\n"})}),"\n",(0,s.jsx)(a.p,{children:"Esto crear\xe1 un nuevo archivo llamado archivo_combinado.txt que contendr\xe1 el contenido de ambos archivos, archivo_1.txt y archivo_2.txt."}),"\n",(0,s.jsxs)(a.h4,{id:"escritura-interactiva-con-cat",children:["Escritura interactiva con ",(0,s.jsx)(a.code,{children:"cat"})]}),"\n",(0,s.jsxs)(a.p,{children:["Si ejecut\xe1s ",(0,s.jsx)(a.code,{children:"cat"})," seguido de ",(0,s.jsx)(a.code,{children:">"})," y el nombre de un archivo sin especificar un archivo fuente, pod\xe9s escribir libremente lo que quer\xe9s guardar en ese archivo. Lo que escribas en la terminal se enviar\xe1 al archivo hasta que presiones ",(0,s.jsx)(a.code,{children:"Ctrl+D"})," para indicar el fin de la entrada:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"cat > notas.txt\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Al ejecutar este comando, lo que escribas a continuaci\xf3n se guardar\xe1 en ",(0,s.jsx)(a.code,{children:"notas.txt"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(a.h4,{id:"redirecci\xf3n-de-entrada-",children:["Redirecci\xf3n de entrada (",(0,s.jsx)(a.code,{children:"<"}),")"]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"<"}),": Este operador hace lo opuesto al ",(0,s.jsx)(a.code,{children:">"}),". En lugar de redirigir la salida de un comando a un archivo, toma el contenido de un archivo y lo usa como entrada para un comando."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"wc -w < archivo.txt\n"})}),"\n",(0,s.jsx)(a.p,{children:"En este ejemplo, wc -w cuenta las palabras en el archivo archivo.txt, utilizando el contenido del archivo como entrada para el comando wc."}),"\n",(0,s.jsxs)(a.h3,{id:"pipelines-",children:["Pipelines (",(0,s.jsx)(a.code,{children:"|"}),")"]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"|"}),": Los pipelines permiten conectar la salida de un comando directamente a la entrada de otro comando. Esto es extremadamente \xfatil cuando quer\xe9s procesar datos en varias etapas, utilizando m\xfaltiples comandos."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'comando1 | comando2 | comando3\n\necho "Hola Mundo" | less\n\n'})}),"\n",(0,s.jsxs)(a.p,{children:["Aqu\xed, el texto ",(0,s.jsx)(a.code,{children:'"Hola Mundo"'})," se env\xeda como entrada al comando ",(0,s.jsx)(a.code,{children:"less"}),", que permite visualizar el contenido de manera paginada."]}),"\n",(0,s.jsxs)(a.p,{children:["Otro ejemplo com\xfan es usar ",(0,s.jsx)(a.code,{children:"grep"})," para filtrar la salida de un comando:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'ls -l | grep ".txt"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En ese caso, la salida del comando ",(0,s.jsx)(a.code,{children:"ls -l"})," (que lista archivos en detalle) se pasa al comando ",(0,s.jsx)(a.code,{children:"grep"}),", que filtra y muestra solo las l\xedneas que contienen ",(0,s.jsx)(a.code,{children:".txt"}),", es decir, archivos con esa extensi\xf3n."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"cat archivo.txt | wc -l\n"})}),"\n",(0,s.jsxs)(a.p,{children:["En este caso, el comando ",(0,s.jsx)(a.code,{children:"cat archivo.txt"})," se utiliza para visualizar el contenido del archivo denominado ",(0,s.jsx)(a.code,{children:"archivo.txt"}),". La salida de este comando se redirige al comando ",(0,s.jsx)(a.code,{children:"wc -l"}),", que cuenta el n\xfamero total de l\xedneas en el archivo."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'cat archivo.txt | grep "hola"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["Aqu\xed, el comando ",(0,s.jsx)(a.code,{children:"cat archivo.txt"})," se emplea para mostrar el contenido de ",(0,s.jsx)(a.code,{children:"archivo.txt"}),". Este contenido se pasa al comando ",(0,s.jsx)(a.code,{children:'grep "hola"'}),', que filtra y muestra \xfanicamente las l\xedneas que contienen la palabra "hola".']}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"cat archivo.txt | sort\n"})}),"\n",(0,s.jsxs)(a.p,{children:["En este ejemplo, el comando cat ",(0,s.jsx)(a.code,{children:"archivo.txt"})," presenta el contenido del archivo ",(0,s.jsx)(a.code,{children:"archivo.txt"}),". La salida es redirigida al comando sort, el cual organiza alfab\xe9ticamente las l\xedneas del archivo y muestra el resultado ordenado."]}),"\n",(0,s.jsxs)(a.p,{children:["El comando ",(0,s.jsx)(a.code,{children:"grep"}),' es una herramienta de b\xfasqueda en sistemas Unix/Linux que permite localizar l\xedneas que coinciden con un patr\xf3n espec\xedfico dentro de uno o varios archivos. Su nombre proviene de una abreviatura del comando de b\xfasqueda en editores de texto en modo consola: "global regular expression print".']}),"\n",(0,s.jsx)(a.h4,{id:"ejemplos-de-uso",children:"Ejemplos de uso:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.strong,{children:"Buscar una palabra espec\xedfica en un archivo:"})}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'grep "hola" ejemplo.txt\n'})}),"\n",(0,s.jsx)(a.p,{children:'En este caso, el comando grep busca la palabra "hola" en el archivo ejemplo.txt y muestra todas las l\xedneas que contienen dicha palabra.'}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.strong,{children:"Buscar una palabra espec\xedfica y luego refinar la b\xfasqueda con otra palabra:"})}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'grep "hola" archivo1 | grep "busqueda2"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["Primero, el comando ",(0,s.jsx)(a.code,{children:"grep"}),' busca la palabra "hola" en el archivo archivo1. La salida de esta b\xfasqueda se pasa a otro comando ',(0,s.jsx)(a.code,{children:"grep"}),' que filtra las l\xedneas que tambi\xe9n contienen la palabra "busqueda2". El resultado final muestra solo las l\xedneas que contienen ambas palabras.']}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.strong,{children:"Buscar una palabra en todos los archivos de un directorio:"})}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'grep -l "palabra" ./*\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este ejemplo, la opci\xf3n ",(0,s.jsx)(a.code,{children:"-l"})," del comando ",(0,s.jsx)(a.code,{children:"grep"}),' indica que se deben listar \xfanicamente los nombres de los archivos que contienen la palabra "palabra". La b\xfasqueda se realiza en todos los archivos del directorio actual, indicado por ./*.']}),"\n",(0,s.jsx)(a.h2,{id:"lenguaje-de-scripting",children:"Lenguaje de Scripting"}),"\n",(0,s.jsx)(a.p,{children:"Adem\xe1s de ser un int\xe9rprete de comandos, Bash es un lenguaje de scripting completo. Los scripts de Bash son archivos de texto que contienen una secuencia de comandos Bash. Estos scripts pueden automatizar tareas repetitivas, realizar operaciones complejas y gestionar el sistema de manera m\xe1s eficiente. Son muy \xfatiles para tareas como la configuraci\xf3n del sistema, la gesti\xf3n de archivos y la ejecuci\xf3n de tareas programadas."}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Creaci\xf3n de scripts:"}),' Para crear un script en Bash, escrib\xeds varios comandos en un archivo de texto. Los scripts comienzan t\xedpicamente con una l\xednea especial llamada "shebang", que indica al sistema qu\xe9 int\xe9rprete usar para ejecutar el script. La l\xednea shebang tiene el formato:']}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"#!/bin/bash\n"})}),"\n",(0,s.jsx)(a.p,{children:"Esto le dice al sistema que ejecute el script usando Bash."}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Ejecuci\xf3n de scripts:"})," Para ejecutar un script de Bash, us\xe1s el comando ",(0,s.jsx)(a.code,{children:"./"})," seguido del nombre del script. Por ejemplo:"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"./mi_script.sh\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Aseg\xfarate de que el archivo del script tenga permisos de ejecuci\xf3n. Si no tiene permisos de ejecuci\xf3n, pod\xe9s agregarlos con el comando ",(0,s.jsx)(a.code,{children:"chmod"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"chmod +x mi_script.sh\n"})}),"\n",(0,s.jsx)(a.h4,{id:"variables-y-redirecci\xf3n",children:"Variables y Redirecci\xf3n"}),"\n",(0,s.jsx)(a.p,{children:"Dentro de un script, pod\xe9s usar variables de entorno y redirecci\xf3n de entrada/salida para manejar datos de manera m\xe1s eficiente. Las variables te permiten almacenar valores temporales, y la redirecci\xf3n te ayuda a controlar d\xf3nde se env\xedan los datos de entrada y salida."}),"\n",(0,s.jsx)(a.h4,{id:"estructuras-de-control",children:"Estructuras de Control"}),"\n",(0,s.jsxs)(a.p,{children:["Bash soporta estructuras de control como ",(0,s.jsx)(a.code,{children:"if"}),", ",(0,s.jsx)(a.code,{children:"for"}),", ",(0,s.jsx)(a.code,{children:"while"}),", y ",(0,s.jsx)(a.code,{children:"case"}),", lo que permite construir scripts m\xe1s complejos y din\xe1micos. Estas estructuras se desarrollar\xe1n con mayor detalle en otra secci\xf3n."]}),"\n",(0,s.jsx)(a.h4,{id:"input-del-usuario",children:"Input del Usuario"}),"\n",(0,s.jsxs)(a.p,{children:["Un script puede solicitar input del usuario usando el comando ",(0,s.jsx)(a.code,{children:"read"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "Ingresa tu nombre:"\nread nombre\necho "Hola, $nombre"\n'})}),"\n",(0,s.jsx)(a.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(a.p,{children:"En Bash, las variables se utilizan para almacenar y manipular datos. Las variables pueden contener valores como cadenas de texto, n\xfameros o resultados de comandos. Los valores almacenados en las variables pueden ser utilizados en comandos y scripts para realizar operaciones din\xe1micas, lo que proporciona gran flexibilidad en la automatizaci\xf3n de tareas."}),"\n",(0,s.jsx)(a.h3,{id:"definici\xf3n-de-variables",children:"Definici\xf3n de Variables"}),"\n",(0,s.jsx)(a.p,{children:"Para definir una variable en Bash, simplemente asign\xe1s un valor a un nombre de variable sin espacios entre el nombre, el signo igual, y el valor. Por ejemplo:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'nombre="Jos\xe9"\nedad=30\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este caso, ",(0,s.jsx)(a.code,{children:"nombre"}),' es una variable que almacena la cadena "Jos\xe9", y ',(0,s.jsx)(a.code,{children:"edad"})," es una variable que almacena el n\xfamero 30."]}),"\n",(0,s.jsx)(a.h4,{id:"acceso-a-variables",children:"Acceso a Variables"}),"\n",(0,s.jsxs)(a.p,{children:["Para acceder al valor almacenado en una variable, us\xe1s el signo ",(0,s.jsx)(a.code,{children:"$"})," (expansi\xf3n de terminal) seguido del nombre de la variable. Por ejemplo:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "Mi nombre es $nombre y tengo $edad a\xf1os."\n'})}),"\n",(0,s.jsxs)(a.p,{children:["Esto imprimir\xe1 en la terminal: ",(0,s.jsx)(a.code,{children:"Mi nombre es Jos\xe9 y tengo 30 a\xf1os."})]}),"\n",(0,s.jsx)(a.h3,{id:"variables-de-entorno",children:"Variables de Entorno"}),"\n",(0,s.jsx)(a.p,{children:"Adem\xe1s de las variables que defin\xeds en tus scripts, existen variables de entorno que son proporcionadas por el sistema operativo y est\xe1n disponibles en todos los scripts y comandos. Algunas variables de entorno comunes son:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$HOME"}),": Contiene el directorio home del usuario actual."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$PATH"}),": Contiene los directorios donde el sistema busca los comandos ejecutables."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$USER"}),": Almacena el nombre del usuario actual."]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"Pod\xe9s utilizar y modificar estas variables de entorno en tus scripts:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'echo "El directorio home del usuario $USER es $HOME"\n'})}),"\n",(0,s.jsx)(a.h3,{id:"asignaci\xf3n-de-resultados-de-comandos-a-variables",children:"Asignaci\xf3n de Resultados de Comandos a Variables"}),"\n",(0,s.jsx)(a.p,{children:"Una gran caracter\xedstica de Bash es la capacidad de asignar el resultado de un comando a una variable. Esto se hace utilizando comillas invertidas (`) o $(...). Por ejemplo:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"fecha_actual=$(date)\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Aqu\xed, la variable ",(0,s.jsx)(a.code,{children:"fecha_actual"})," contendr\xe1 la salida del comando ",(0,s.jsx)(a.code,{children:"date"}),", que es la fecha y hora actuales."]}),"\n",(0,s.jsx)(a.h3,{id:"variables-temporales",children:"Variables Temporales"}),"\n",(0,s.jsx)(a.p,{children:"Pod\xe9s definir variables temporales para usarlas solo dentro de un comando espec\xedfico. Esto es \xfatil para modificar temporalmente el entorno sin afectar al sistema globalmente:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'NOMBRE="Carlos" echo "Hola, $NOMBRE"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este caso, ",(0,s.jsx)(a.code,{children:"NOMBRE"})," se define como ",(0,s.jsx)(a.code,{children:'"Carlos"'})," solo para la ejecuci\xf3n del comando ",(0,s.jsx)(a.code,{children:"echo"}),"."]}),"\n",(0,s.jsx)(a.h3,{id:"variables-especiales",children:"Variables Especiales"}),"\n",(0,s.jsx)(a.p,{children:"Bash tambi\xe9n tiene algunas variables especiales que son \xfatiles en scripts:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$0"}),": El nombre del script."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$1"}),", ",(0,s.jsx)(a.code,{children:"$2"}),", ... ",(0,s.jsx)(a.code,{children:"$9"}),": Los argumentos pasados al script."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$#"}),": El n\xfamero de argumentos pasados al script."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$?"}),": El c\xf3digo de salida del \xfaltimo comando ejecutado."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"$$"}),": El ID del proceso del script en ejecuci\xf3n."]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"Por ejemplo, si ejecut\xe1s un script con:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"./mi_script.sh arg1 arg2\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Podes acceder a ",(0,s.jsx)(a.code,{children:"arg1"})," y ",(0,s.jsx)(a.code,{children:"arg2"})," dentro de un script utilizando ",(0,s.jsx)(a.code,{children:"$1"})," y ",(0,s.jsx)(a.code,{children:"$2"})," respectivamente."]}),"\n",(0,s.jsx)(a.h3,{id:"declaraci\xf3n-de-variables-de-s\xf3lo-lectura",children:"Declaraci\xf3n de Variables de s\xf3lo Lectura"}),"\n",(0,s.jsxs)(a.p,{children:["Si quer\xe9s que una variable no pueda ser modificada despu\xe9s de su asignaci\xf3n, pod\xe9s declararla como de s\xf3lo lectura usando el comando ",(0,s.jsx)(a.code,{children:"readonly"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"readonly PI=3.14159\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Cualquier intento de modificar ",(0,s.jsx)(a.code,{children:"PI"})," despu\xe9s de su declaraci\xf3n resultar\xe1 en un error."]}),"\n",(0,s.jsx)(a.h3,{id:"eliminar-variables",children:"Eliminar Variables"}),"\n",(0,s.jsxs)(a.p,{children:["Pod\xe9s eliminar una variable del entorno utilizando el comando ",(0,s.jsx)(a.code,{children:"unset"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"unset nombre\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Despu\xe9s de esto la variable ",(0,s.jsx)(a.code,{children:"nombre"})," ya no estar\xe1 definida."]}),"\n",(0,s.jsx)(a.h2,{id:"estructuras-condicionales-e-iterativas",children:"Estructuras Condicionales e Iterativas"}),"\n",(0,s.jsx)(a.p,{children:"Bash proporciona varias estructuras de control que permiten gestionar el flujo de ejecuci\xf3n de comandos y scripts, adapt\xe1ndose a diferentes situaciones y necesidades. Estas estructuras incluyen tanto condicionales como bucles, facilitando la toma de decisiones y la repetici\xf3n de tareas en los scripts. A continuaci\xf3n, se describen las principales, junto con su sintaxis:"}),"\n",(0,s.jsx)(a.h3,{id:"if",children:(0,s.jsx)(a.code,{children:"if"})}),"\n",(0,s.jsx)(a.p,{children:"Esta estructura permite ejecutar un bloque de comandos si se cumple una determinada condici\xf3n. Es fundamental para tomar decisiones en los scripts, permitiendo realizar distintas acciones seg\xfan el resultado de una evaluaci\xf3n."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"if [ condici\xf3n ]; then\n    comandos\nelif [ otra_condici\xf3n ]; then\n    comandos\nelse\n    comandos\nfi\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"if [ condici\xf3n ]; then"}),": Comienza la estructura. La condici\xf3n se eval\xfaa y, si es verdadera, se ejecutan los comandos dentro del bloque."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"elif [ otra_condici\xf3n ]; then"}),": Es opcional y permite a\xf1adir m\xe1s condiciones."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"else"}),": Opcional. Los comandos dentro de este bloque se ejecutan si ninguna de las condiciones anteriores se cumple."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"fi"}),": Finaliza la estructura ",(0,s.jsx)(a.code,{children:"if"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(a.h4,{id:"comparaciones-en-if",children:["Comparaciones en ",(0,s.jsx)(a.code,{children:"if"})]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.strong,{children:"N\xfameros:"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"eq"}),": Igual (equal)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"ne"}),": No son iguales (not equal)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"gt"}),": Mayor que (greater than)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"lt"}),": Menor que (less than)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"ge"}),": Mayor o igual (greater or equal)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"le"}),": Menor o igual (less or equal)"]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.strong,{children:"Cadenas:"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Comparar si dos cadenas son iguales: ",(0,s.jsx)(a.code,{children:"string1 == string2"})]}),"\n",(0,s.jsxs)(a.li,{children:["Comparar si dos cadenas son diferentes: ",(0,s.jsx)(a.code,{children:"string1 != string2"})]}),"\n",(0,s.jsxs)(a.li,{children:["Verificar si una cadena coincide con una expresi\xf3n regular: ",(0,s.jsx)(a.code,{children:"string1 =~ regex"})," \u2192 Devuelve ",(0,s.jsx)(a.code,{children:"true"})]}),"\n",(0,s.jsxs)(a.li,{children:["Verificar si la longitud de una cadena es cero: ",(0,s.jsx)(a.code,{children:"-z"})]}),"\n",(0,s.jsxs)(a.li,{children:["Verificar si la longitud de una cadena no es cero: ",(0,s.jsx)(a.code,{children:"-n"})]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"for",children:(0,s.jsx)(a.code,{children:"for"})}),"\n",(0,s.jsx)(a.p,{children:"Utilizado para repetir un conjunto de comandos para cada elemento de una secuencia, como una lista de elementos o n\xfameros."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"for variable in secuencia; do\n    comandos\ndone\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"for variable in secuencia; do"}),": Inicia el bucle. La variable toma el valor de cada elemento en la secuencia uno por uno."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"comandos"}),": Los comandos que se ejecutan en cada iteraci\xf3n del bucle."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"done"}),": Finaliza el bucle ",(0,s.jsx)(a.code,{children:"for"}),"."]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"while",children:(0,s.jsx)(a.code,{children:"while"})}),"\n",(0,s.jsx)(a.p,{children:"Ejecuta comandos repetidamente mientras una condici\xf3n sea verdadera. Es \xfatil para bucles en los que no sabes cu\xe1ntas iteraciones necesitar\xe1s de antemano."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"while [ condici\xf3n ]; do\t\t\n    comandos\ndone\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"while [ condici\xf3n ]; do"}),": Comienza el bucle. Los comandos se ejecutan mientras la condici\xf3n sea verdadera."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"comandos"}),": Los comandos que se ejecutan en cada iteraci\xf3n del bucle."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"done"}),": Finaliza el bucle ",(0,s.jsx)(a.code,{children:"while"}),"."]}),"\n",(0,s.jsx)(a.li,{children:"Todo lo que se puede hacer con un for se puede hacer con un while pero no necesariamente viceversa."}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"case",children:(0,s.jsx)(a.code,{children:"Case"})}),"\n",(0,s.jsxs)(a.p,{children:["Permite ejecutar comandos basados en el valor de una variable, similar a un ",(0,s.jsx)(a.code,{children:"switch"})," en otros lenguajes de programaci\xf3n. Es \xfatil para manejar m\xfaltiples opciones de forma m\xe1s ordenada."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"case variable in\n    patr\xf3n1)\n        comandos ;;\n    patr\xf3n2)\n        comandos ;;\n    *)\n        comandos ;;\nesac\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"case variable in"}),": Comienza la estructura ",(0,s.jsx)(a.code,{children:"case"}),"; ",(0,s.jsx)(a.code,{children:"variable"})," es el valor que se va a evaluar."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"patr\xf3n1)"}),": Define el primer patr\xf3n que se compara con el valor de ",(0,s.jsx)(a.code,{children:"variable"}),". Los ",(0,s.jsx)(a.code,{children:"comandos"})," se ejecutan si hay coincidencia."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"*)"}),": El patr\xf3n ",(0,s.jsx)(a.code,{children:"*"})," act\xfaa como un comod\xedn para manejar cualquier caso no especificado anteriormente."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"esac"}),": Finaliza la estructura ",(0,s.jsx)(a.code,{children:"case"}),"."]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"until",children:(0,s.jsx)(a.code,{children:"Until"})}),"\n",(0,s.jsx)(a.p,{children:"El bucle until ejecuta los comandos mientras la condici\xf3n sea falsa. Termina cuando la condici\xf3n se vuelve verdadera."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"until [ condicion ]; do\n    comandos\ndone\n"})}),"\n",(0,s.jsx)(a.h2,{id:"funciones",children:"Funciones"}),"\n",(0,s.jsx)(a.p,{children:"En Bash, las funciones permiten agrupar comandos relacionados y reutilizarlos en diferentes partes del script. Esto mejora la organizaci\xf3n y modularidad del c\xf3digo, haciendo que sea m\xe1s f\xe1cil de leer y mantener."}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.strong,{children:"Definici\xf3n de una funci\xf3n"})}),"\n",(0,s.jsx)(a.p,{children:"Para definir una funci\xf3n en Bash, utilizamos la siguiente sintaxis:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"nombre_funcion() {\n    # Comandos a ejecutar\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.strong,{children:"Ejemplo de definici\xf3n de funci\xf3n:"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'#!/bin/bash\n\nsaludar(){\n    echo "\xa1Hola, $1!"\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"En el ejemplo:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"saludar"})," es el nombre de la funci\xf3n."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"$1"})," representa el primer argumento pasado a la funci\xf3n."]}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"llamar-a-una-funci\xf3n",children:"Llamar a una funci\xf3n"}),"\n",(0,s.jsx)(a.p,{children:"Despu\xe9s de definir una funci\xf3n, pod\xe9s llamarla en cualquier parte del script posterior a su definici\xf3n:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'saludar "Daniel"\n'})}),"\n",(0,s.jsx)(a.p,{children:"Esto imprimir\xe1: \xa1Hola, Daniel!"}),"\n",(0,s.jsx)(a.h4,{id:"retorno-de-valores",children:"Retorno de valores"}),"\n",(0,s.jsxs)(a.p,{children:["Aunque Bash no soporta el retorno de valores directamente como en otros lenguajes de programaci\xf3n, podemos utilizar ",(0,s.jsx)(a.code,{children:"echo"})," para devolver un valor y capturarlo con ",(0,s.jsx)(a.code,{children:"$()"}),":"]}),"\n",(0,s.jsx)(a.p,{children:"Ejemplo de retorno de valores:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'obtener_suma() {\n    local suma=$(( $1 + $2 ))\n    echo $suma\n}\n\nresultado=$(obtener_suma 5 10)\necho "La suma es: $resultado"\n'})}),"\n",(0,s.jsxs)(a.p,{children:["En este ejemplo, ",(0,s.jsx)(a.code,{children:"obtener_suma"})," devuelve la suma de dos n\xfameros, y el valor es capturado en la variable ",(0,s.jsx)(a.code,{children:"resultado"}),"."]}),"\n",(0,s.jsx)(a.h4,{id:"uso-de-variables-locales",children:"Uso de variables locales"}),"\n",(0,s.jsxs)(a.p,{children:["Dentro de una funci\xf3n, utiliza la palabra clave ",(0,s.jsx)(a.code,{children:"local"})," para definir variables que solo est\xe1n disponibles dentro de esa funci\xf3n, evitando conflictos con variables globales:"]}),"\n",(0,s.jsx)(a.p,{children:"Ejemplo de variables locales:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:'calcular_area() {\n    local base=$1\n    local altura=$2\n    local area=$(( base * altura )) \n    echo $area\n}\n\narea_rectangulo=$(calcular_area 5 10)\necho "El \xe1rea del rect\xe1ngulo es: $area_rectangulo"\n'})})]})}function u(e={}){const{wrapper:a}={...(0,r.ah)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},3905:(e,a,n)=>{n.d(a,{ah:()=>d});var s=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,s)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,s,r=function(e,a){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),d=function(e){var a=s.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},t={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},u=s.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),h=d(n),p=r,j=h["".concat(l,".").concat(p)]||h[p]||t[p]||i;return n?s.createElement(j,c(c({ref:a},u),{},{components:n})):s.createElement(j,c({ref:a},u))}));u.displayName="MDXCreateElement"}}]);