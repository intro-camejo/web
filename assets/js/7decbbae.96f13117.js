"use strict";(self.webpackChunkaninfo_web_catedra=self.webpackChunkaninfo_web_catedra||[]).push([[4604],{7731:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Material/Apuntes/apunte_sql","title":"SQL","description":"Este apartado contiene apuntes sobre SQL. \xa1Esperamos que te sean \xfatiles!","source":"@site/docs/Material/Apuntes/apunte_sql.md","sourceDirName":"Material/Apuntes","slug":"/Material/Apuntes/apunte_sql","permalink":"/web/docs/Material/Apuntes/apunte_sql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTML y CSS","permalink":"/web/docs/Material/Apuntes/apunte_html_cs"},"next":{"title":"Git y GitHub","permalink":"/web/docs/Material/Apuntes/git"}}');var l=n(4848),o=n(8453);const d={},r="SQL",i={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Manipulaci\xf3n de tablas y bases de datos",id:"manipulaci\xf3n-de-tablas-y-bases-de-datos",level:2},{value:"Creaci\xf3n de una tabla",id:"creaci\xf3n-de-una-tabla",level:3},{value:"Inserci\xf3n de datos",id:"inserci\xf3n-de-datos",level:3},{value:"Eliminaci\xf3n de datos",id:"eliminaci\xf3n-de-datos",level:3},{value:"Actualizaci\xf3n de datos",id:"actualizaci\xf3n-de-datos",level:3},{value:"Actualizaci\xf3n de columnas en una tabla",id:"actualizaci\xf3n-de-columnas-en-una-tabla",level:3},{value:"Eliminaci\xf3n de una tabla",id:"eliminaci\xf3n-de-una-tabla",level:3},{value:"Quitar datos de la tabla",id:"quitar-datos-de-la-tabla",level:3},{value:"Eliminaci\xf3n de una base de datos",id:"eliminaci\xf3n-de-una-base-de-datos",level:3},{value:"Consultas en una tabla",id:"consultas-en-una-tabla",level:2},{value:"Filtrado de resultados",id:"filtrado-de-resultados",level:3},{value:"Ordenamiento de resultados",id:"ordenamiento-de-resultados",level:3},{value:"Agrupamiento de resultados",id:"agrupamiento-de-resultados",level:3},{value:"Funciones de agregaci\xf3n",id:"funciones-de-agregaci\xf3n",level:3},{value:"Consultas entre tablas",id:"consultas-entre-tablas",level:2},{value:"Joins (Uniones)",id:"joins-uniones",level:3},{value:"Subconsultas",id:"subconsultas",level:3},{value:"Consultas avanzadas",id:"consultas-avanzadas",level:3},{value:"<em>Primary Keys</em> y <em>Foreign Keys</em>",id:"primary-keys-y-foreign-keys",level:2},{value:"Primary Keys (Claves Primarias)",id:"primary-keys-claves-primarias",level:3},{value:"Foreign Keys (Claves For\xe1neas)",id:"foreign-keys-claves-for\xe1neas",level:3}];function t(e){const a={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"sql",children:"SQL"})}),"\n",(0,l.jsx)(a.p,{children:"Este apartado contiene apuntes sobre SQL. \xa1Esperamos que te sean \xfatiles!"}),"\n",(0,l.jsx)(a.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,l.jsxs)(a.p,{children:[(0,l.jsx)(a.strong,{children:"SQL (Structured Query Language)"})," es un lenguaje de programaci\xf3n utilizado para gestionar bases de datos relacionales. Permite realizar consultas, insertar, actualizar y eliminar datos de manera eficiente. A continuaci\xf3n, se presentan algunos conceptos clave:"]}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Base de datos"}),": Un conjunto organizado de datos que se pueden acceder y manipular."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Tabla"}),": Una estructura dentro de una base de datos que almacena datos en filas y columnas."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Consulta"}),": Una instrucci\xf3n SQL que se utiliza para recuperar o manipular datos en una base de datos."]}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["Notemos que hay una distinci\xf3n importante entre una ",(0,l.jsx)(a.strong,{children:"Base de Datos"})," y una ",(0,l.jsx)(a.strong,{children:"Tabla"}),". Una Base de Datos puede contener m\xfaltiples Tablas, cada una con su propia estructura y datos. La base de datos puede referirse a un conjunto completo de datos, mientras que una tabla es una representaci\xf3n espec\xedfica de esos datos en forma de filas y columnas."]}),"\n",(0,l.jsx)(a.p,{children:"Por ejemplo, en una base de datos de una empresa, podr\xedas tener una tabla para empleados, otra para departamentos y otra para proyectos. Cada tabla contendr\xeda informaci\xf3n espec\xedfica relacionada con su tema, pero todas formar\xedan parte de la misma base de datos."}),"\n",(0,l.jsx)(a.h2,{id:"manipulaci\xf3n-de-tablas-y-bases-de-datos",children:"Manipulaci\xf3n de tablas y bases de datos"}),"\n",(0,l.jsxs)(a.p,{children:["Para crear una base de datos en SQL, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"CREATE DATABASE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"CREATE DATABASE mi_base_de_datos;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta crea una nueva base de datos llamada ",(0,l.jsx)(a.code,{children:"mi_base_de_datos"}),". Una vez creada, se puede utilizar para crear tablas y almacenar datos."]}),"\n",(0,l.jsx)(a.h3,{id:"creaci\xf3n-de-una-tabla",children:"Creaci\xf3n de una tabla"}),"\n",(0,l.jsxs)(a.p,{children:["Para crear una tabla dentro de una base de datos, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"CREATE TABLE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"CREATE TABLE empleados (\n    id INT PRIMARY KEY,\n    nombre VARCHAR(50),\n    departamento VARCHAR(50),\n    salario DECIMAL(10, 2)\n);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta crea una tabla llamada ",(0,l.jsx)(a.code,{children:"empleados"})," con cuatro columnas: ",(0,l.jsx)(a.code,{children:"id"}),", ",(0,l.jsx)(a.code,{children:"nombre"}),", ",(0,l.jsx)(a.code,{children:"departamento"})," y ",(0,l.jsx)(a.code,{children:"salario"}),". La columna ",(0,l.jsx)(a.code,{children:"id"})," es de tipo entero (",(0,l.jsx)(a.code,{children:"INT"}),") y se define como la clave primaria (",(0,l.jsx)(a.code,{children:"PRIMARY KEY"}),"), lo que significa que debe ser \xfanica para cada registro. Las columnas ",(0,l.jsx)(a.code,{children:"nombre"})," y ",(0,l.jsx)(a.code,{children:"departamento"})," son de tipo cadena de caracteres variable (",(0,l.jsx)(a.code,{children:"VARCHAR"}),") con un m\xe1ximo de 50 caracteres, y la columna ",(0,l.jsx)(a.code,{children:"salario"})," es de tipo decimal con dos decimales."]}),"\n",(0,l.jsx)(a.h3,{id:"inserci\xf3n-de-datos",children:"Inserci\xf3n de datos"}),"\n",(0,l.jsxs)(a.p,{children:["Para insertar datos en una tabla, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"INSERT INTO"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"INSERT INTO empleados (id, nombre, departamento, salario)\nVALUES (1, 'Juan P\xe9rez', 'Recursos Humanos', 3000.00);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta inserta un nuevo registro en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," con los valores especificados para cada columna. Se pueden insertar m\xfaltiples registros utilizando varias sentencias ",(0,l.jsx)(a.code,{children:"INSERT INTO"}),' o una sola sentencia con m\xfaltiples valores. En el ejemplo de arriba solo se est\xe1 agregando informaci\xf3n de un empleado llamado "Juan P\xe9rez".']}),"\n",(0,l.jsx)(a.p,{children:"Podr\xedamos agregar muchos m\xe1s empleados en un mismo bloque:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"INSERT INTO empleados (id, nombre, departamento, salario)\nVALUES \n(2, 'Ana G\xf3mez', 'Finanzas', 3500.00),\n(3, 'Luis Mart\xednez', 'IT', 4000.00),\n(4, 'Mar\xeda L\xf3pez', 'Marketing', 3200.00);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esto inserta tres registros en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," de una sola vez, lo que es m\xe1s eficiente que realizar m\xfaltiples sentencias ",(0,l.jsx)(a.code,{children:"INSERT INTO"})," por separado."]}),"\n",(0,l.jsx)(a.h3,{id:"eliminaci\xf3n-de-datos",children:"Eliminaci\xf3n de datos"}),"\n",(0,l.jsxs)(a.p,{children:["Para eliminar datos de una tabla, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"DELETE FROM"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"DELETE FROM empleados\nWHERE id = 1;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta elimina el registro de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," donde el ",(0,l.jsx)(a.code,{children:"id"})," es igual a 1. Es importante tener cuidado al utilizar esta instrucci\xf3n, ya que ",(0,l.jsx)(a.strong,{children:"eliminar\xe1 permanentemente"})," los datos del registro especificado."]}),"\n",(0,l.jsx)(a.h3,{id:"actualizaci\xf3n-de-datos",children:"Actualizaci\xf3n de datos"}),"\n",(0,l.jsxs)(a.p,{children:["Para actualizar datos en una tabla, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"UPDATE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"UPDATE empleados\nSET salario = 3200.00\nWHERE id = 2;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta actualiza el salario del empleado con ",(0,l.jsx)(a.code,{children:"id"})," igual a 2, estableciendo su nuevo salario en ",(0,l.jsx)(a.code,{children:"$3200.00"}),". Al igual que con la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"DELETE"}),", es importante especificar correctamente la condici\xf3n en la cl\xe1usula ",(0,l.jsx)(a.code,{children:"WHERE"})," para evitar actualizar registros incorrectos."]}),"\n",(0,l.jsx)(a.h3,{id:"actualizaci\xf3n-de-columnas-en-una-tabla",children:"Actualizaci\xf3n de columnas en una tabla"}),"\n",(0,l.jsxs)(a.p,{children:["Para actualizar la estructura de una tabla, como agregar o eliminar columnas, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"ALTER TABLE"}),". Por ejemplo, para agregar una nueva columna llamada ",(0,l.jsx)(a.code,{children:"fecha_contratacion"})," a la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),", se puede hacer lo siguiente:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"ALTER TABLE empleados\nADD fecha_contratacion DATE;\n"})}),"\n",(0,l.jsx)(a.p,{children:"Si luego se quisiera eliminar esta columna, se utilizar\xeda:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"ALTER TABLE empleados\nDROP COLUMN fecha_contratacion;\n"})}),"\n",(0,l.jsx)(a.h3,{id:"eliminaci\xf3n-de-una-tabla",children:"Eliminaci\xf3n de una tabla"}),"\n",(0,l.jsxs)(a.p,{children:["Para eliminar una tabla de una base de datos, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"DROP TABLE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"DROP TABLE empleados;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta elimina la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," de la base de datos, junto con todos los datos que contiene, ",(0,l.jsxs)(a.strong,{children:["a menos que existan restricciones de ",(0,l.jsx)(a.em,{children:"foreign keys"})]}),". Al igual que con la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"DELETE"}),", es importante tener cuidado al utilizar ",(0,l.jsx)(a.code,{children:"DROP TABLE"}),", ya que ",(0,l.jsx)(a.strong,{children:"eliminar\xe1 permanentemente"})," la tabla y sus datos."]}),"\n",(0,l.jsxs)(a.p,{children:["Si se sabe que la tabla tiene restricciones de ",(0,l.jsx)(a.em,{children:"foreign keys"})," y se desea eliminarla junto con todas las referencias, se puede utilizar la opci\xf3n ",(0,l.jsx)(a.code,{children:"CASCADE"}),":"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"DROP TABLE empleados CASCADE;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta eliminar\xe1 la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y todas las referencias a ella en otras tablas, eliminando tambi\xe9n los datos asociados."]}),"\n",(0,l.jsx)(a.h3,{id:"quitar-datos-de-la-tabla",children:"Quitar datos de la tabla"}),"\n",(0,l.jsxs)(a.p,{children:["Para eliminar todos los datos de una tabla sin eliminar la tabla en s\xed, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"TRUNCATE TABLE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"TRUNCATE TABLE empleados;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta elimina todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),", pero mantiene la estructura de la tabla intacta. Por lo tanto, la tabla seguir\xe1 existiendo y se podr\xe1 seguir utilizando para insertar nuevos datos."]}),"\n",(0,l.jsx)(a.h3,{id:"eliminaci\xf3n-de-una-base-de-datos",children:"Eliminaci\xf3n de una base de datos"}),"\n",(0,l.jsxs)(a.p,{children:["Para eliminar una base de datos completa, se utiliza la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"DROP DATABASE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"DROP DATABASE mi_base_de_datos;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta elimina la base de datos ",(0,l.jsx)(a.code,{children:"mi_base_de_datos"})," junto con todas las tablas y datos que contiene. Al igual que con las instrucciones ",(0,l.jsx)(a.code,{children:"DELETE"})," y ",(0,l.jsx)(a.code,{children:"DROP TABLE"}),", es importante tener cuidado al utilizar ",(0,l.jsx)(a.code,{children:"DROP DATABASE"}),", ya que ",(0,l.jsx)(a.strong,{children:"eliminar\xe1 permanentemente"})," la base de datos y todos sus contenidos."]}),"\n",(0,l.jsx)(a.h2,{id:"consultas-en-una-tabla",children:"Consultas en una tabla"}),"\n",(0,l.jsxs)(a.p,{children:["Ahora que ya se tiene un conjunto de tablas con datos insertados, se pueden realizar consultas para recuperar informaci\xf3n espec\xedfica. Las consultas se realizan utilizando la instrucci\xf3n ",(0,l.jsx)(a.code,{children:"SELECT"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y muestra todas las columnas. El asterisco (",(0,l.jsx)(a.code,{children:"*"}),") indica que se deben seleccionar todas las columnas disponibles."]}),"\n",(0,l.jsx)(a.p,{children:"Para seleccionar columnas espec\xedficas, se pueden enumerar los nombres de las columnas en lugar de usar el asterisco. Por ejemplo:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT nombre, salario FROM empleados;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona solo las columnas ",(0,l.jsx)(a.code,{children:"nombre"})," y ",(0,l.jsx)(a.code,{children:"salario"})," de la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),", mostrando \xfanicamente esos datos en el resultado."]}),"\n",(0,l.jsx)(a.h3,{id:"filtrado-de-resultados",children:"Filtrado de resultados"}),"\n",(0,l.jsxs)(a.p,{children:["Para filtrar los resultados de una consulta, se utiliza la cl\xe1usula ",(0,l.jsx)(a.code,{children:"WHERE"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nWHERE departamento = 'IT';\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," donde el departamento es igual a ",(0,l.jsx)(a.strong,{children:"IT"}),". La cl\xe1usula ",(0,l.jsx)(a.code,{children:"WHERE"})," permite especificar condiciones para filtrar los resultados de la consulta."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nWHERE salario > 3000.00;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," donde el salario es mayor a ",(0,l.jsx)(a.strong,{children:"3000.00"}),". Se pueden utilizar operadores de comparaci\xf3n como ",(0,l.jsx)(a.code,{children:"="}),", ",(0,l.jsx)(a.code,{children:">"}),", ",(0,l.jsx)(a.code,{children:"<"}),", ",(0,l.jsx)(a.code,{children:">="}),", ",(0,l.jsx)(a.code,{children:"<="})," y ",(0,l.jsx)(a.code,{children:"<>"})," para establecer condiciones en la cl\xe1usula ",(0,l.jsx)(a.code,{children:"WHERE"}),"."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nWHERE nombre LIKE 'A%';\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," donde el nombre comienza con la letra ",(0,l.jsx)(a.strong,{children:"A"}),". El operador ",(0,l.jsx)(a.code,{children:"LIKE"})," se utiliza para realizar b\xfasquedas basadas en patrones, y el s\xedmbolo ",(0,l.jsx)(a.code,{children:"%"})," act\xfaa como un comod\xedn que representa cualquier secuencia de caracteres."]}),"\n",(0,l.jsx)(a.h3,{id:"ordenamiento-de-resultados",children:"Ordenamiento de resultados"}),"\n",(0,l.jsxs)(a.p,{children:["Para ordenar los resultados de una consulta, se utiliza la cl\xe1usula ",(0,l.jsx)(a.code,{children:"ORDER BY"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nORDER BY salario DESC;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y los ordena por la columna ",(0,l.jsx)(a.code,{children:"salario"})," en orden descendente (",(0,l.jsx)(a.code,{children:"DESC"}),"). Es decir, que los empleados estar\xe1 ordenados desde el de mejor salario al de peor salario. Si se desea ordenar en orden ascendente, se puede utilizar ",(0,l.jsx)(a.code,{children:"ASC"})," o simplemente omitirlo, ya que es el comportamiento predeterminado."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nORDER BY nombre ASC;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y los ordena por la columna ",(0,l.jsx)(a.code,{children:"nombre"})," en orden ascendente (",(0,l.jsx)(a.code,{children:"ASC"}),"). En este caso los empleados estar\xe1n ordenados alfab\xe9ticamente por su nombre, desde la A hasta la Z."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT * FROM empleados\nWHERE departamento = 'Recursos Humanos'\nORDER BY fecha_contratacion DESC;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona todos los registros de la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," donde el departamento es igual a ",(0,l.jsx)(a.strong,{children:"Recursos Humanos"})," y los ordena por la columna ",(0,l.jsx)(a.code,{children:"fecha_contratacion"})," en orden descendente (",(0,l.jsx)(a.code,{children:"DESC"}),"). Esto permite ver solo a los empleados del departamento de Recursos Humanos y ordenarlos por la fecha en que fueron contratados, desde el m\xe1s reciente al m\xe1s antiguo."]}),"\n",(0,l.jsx)(a.h3,{id:"agrupamiento-de-resultados",children:"Agrupamiento de resultados"}),"\n",(0,l.jsxs)(a.p,{children:["Para agrupar los resultados de una consulta, se utiliza la cl\xe1usula ",(0,l.jsx)(a.code,{children:"GROUP BY"}),". Por ejemplo:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT departamento, COUNT(*) AS total_empleados\nFROM empleados\nGROUP BY departamento;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona el departamento y el n\xfamero total de empleados en cada departamento de la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),". La funci\xf3n ",(0,l.jsx)(a.code,{children:"COUNT(*)"})," cuenta el n\xfamero de registros en cada grupo definido por la cl\xe1usula ",(0,l.jsx)(a.code,{children:"GROUP BY"}),". El resultado mostrar\xe1 una lista de departamentos junto con el total de empleados en cada uno."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT departamento, AVG(salario) AS salario_promedio\nFROM empleados\nGROUP BY departamento;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona el departamento y el salario promedio de los empleados en cada departamento de la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),". La funci\xf3n ",(0,l.jsx)(a.code,{children:"AVG(salario)"})," calcula el salario promedio para cada grupo definido por la cl\xe1usula ",(0,l.jsx)(a.code,{children:"GROUP BY"}),". El resultado mostrar\xe1 una lista de departamentos junto con el salario promedio de los empleados en cada uno."]}),"\n",(0,l.jsx)(a.h3,{id:"funciones-de-agregaci\xf3n",children:"Funciones de agregaci\xf3n"}),"\n",(0,l.jsx)(a.p,{children:"SQL proporciona varias funciones de agregaci\xf3n que se pueden utilizar para realizar c\xe1lculos en los datos. Algunas de las funciones m\xe1s comunes son:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"COUNT()"}),": Cuenta el n\xfamero de registros en un grupo."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"SUM()"}),": Suma los valores de una columna en un grupo."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"AVG()"}),": Calcula el promedio de los valores de una columna en un grupo."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"MIN()"}),": Devuelve el valor m\xednimo de una columna en un grupo."]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"MAX()"}),": Devuelve el valor m\xe1ximo de una columna en un grupo."]}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["Por ejemplo, para contar el n\xfamero total de empleados en la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),", se puede utilizar:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT COUNT(*) AS total_empleados\nFROM empleados;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta cuenta el n\xfamero total de registros en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y devuelve el resultado con el alias ",(0,l.jsx)(a.code,{children:"total_empleados"}),"."]}),"\n",(0,l.jsx)(a.h2,{id:"consultas-entre-tablas",children:"Consultas entre tablas"}),"\n",(0,l.jsxs)(a.p,{children:["En SQL, es com\xfan trabajar con m\xfaltiples tablas y realizar consultas que involucren datos de varias de ellas. Esto se logra mediante el uso de ",(0,l.jsx)(a.strong,{children:"joins"})," (uniones) y subconsultas."]}),"\n",(0,l.jsx)(a.h3,{id:"joins-uniones",children:"Joins (Uniones)"}),"\n",(0,l.jsxs)(a.p,{children:["Los ",(0,l.jsx)(a.em,{children:(0,l.jsx)(a.strong,{children:"joins"})})," permiten combinar registros de dos o m\xe1s tablas bas\xe1ndose en una relaci\xf3n entre ellas. Existen varios tipos de joins, siendo el m\xe1s com\xfan el ",(0,l.jsx)(a.code,{children:"INNER JOIN"}),", que devuelve solo los registros que tienen coincidencias en ambas tablas."]}),"\n",(0,l.jsxs)(a.p,{children:["Por ejemplo, si tenemos una tabla ",(0,l.jsx)(a.code,{children:"departamentos"})," que contiene informaci\xf3n sobre los departamentos de la empresa, y queremos obtener una lista de empleados junto con su departamento, podemos hacer lo siguiente:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT empleados.nombre, departamentos.nombre AS departamento\nFROM empleados\nINNER JOIN departamentos ON empleados.departamento = departamentos.id;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona el nombre de los empleados y el nombre de su departamento, uniendo las tablas ",(0,l.jsx)(a.code,{children:"empleados"})," y ",(0,l.jsx)(a.code,{children:"departamentos"})," a trav\xe9s de la columna ",(0,l.jsx)(a.code,{children:"departamento"})," en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," y la columna ",(0,l.jsx)(a.code,{children:"id"})," en la tabla ",(0,l.jsx)(a.code,{children:"departamentos"}),". El resultado mostrar\xe1 una lista de empleados junto con el nombre de su departamento."]}),"\n",(0,l.jsxs)(a.p,{children:["Otra manera de hacer este ",(0,l.jsx)(a.em,{children:"join"})," es utilizando ",(0,l.jsx)(a.code,{children:"WHERE"}),":"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT empleados.nombre, departamentos.nombre AS departamento\nFROM empleados, departamentos\nWHERE empleados.departamento = departamentos.id;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["\xbfC\xf3mo diferenciamos el uso de ",(0,l.jsx)(a.code,{children:"WHERE"})," y ",(0,l.jsx)(a.code,{children:"JOIN"}),"? En realidad, ambas formas son v\xe1lidas y producen el mismo resultado. Sin embargo, el uso de ",(0,l.jsx)(a.code,{children:"JOIN"})," es m\xe1s expl\xedcito y legible, especialmente cuando se trabaja con m\xfaltiples tablas. Adem\xe1s, ",(0,l.jsx)(a.code,{children:"JOIN"})," permite especificar diferentes tipos de uniones, como ",(0,l.jsx)(a.code,{children:"LEFT JOIN"}),", ",(0,l.jsx)(a.code,{children:"RIGHT JOIN"}),", y ",(0,l.jsx)(a.code,{children:"FULL JOIN"}),", que tienen diferentes comportamientos en cuanto a los registros que se incluyen en el resultado."]}),"\n",(0,l.jsx)(a.h3,{id:"subconsultas",children:"Subconsultas"}),"\n",(0,l.jsx)(a.p,{children:"Las subconsultas son consultas anidadas dentro de otra consulta. Se utilizan para realizar operaciones m\xe1s complejas o para filtrar resultados basados en el resultado de otra consulta."}),"\n",(0,l.jsx)(a.p,{children:"Por ejemplo, si queremos obtener una lista de empleados cuyo salario es mayor que el salario promedio de todos los empleados, podemos hacer lo siguiente:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT nombre, salario\nFROM empleados\nWHERE salario > (SELECT AVG(salario) FROM empleados);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona el nombre y el salario de los empleados cuyo salario es mayor que el salario promedio de todos los empleados. La subconsulta ",(0,l.jsx)(a.code,{children:"(SELECT AVG(salario) FROM empleados)"})," calcula el salario promedio, y luego la consulta principal filtra los empleados que cumplen con esa condici\xf3n."]}),"\n",(0,l.jsx)(a.h3,{id:"consultas-avanzadas",children:"Consultas avanzadas"}),"\n",(0,l.jsx)(a.p,{children:"Para realizar consultas m\xe1s avanzadas, se pueden combinar m\xfaltiples joins y subconsultas. Por ejemplo, si queremos obtener una lista de empleados junto con su departamento y el salario promedio de su departamento, podemos hacer lo siguiente:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"SELECT empleados.nombre, departamentos.nombre AS departamento, AVG(empleados.salario) AS salario_promedio\nFROM empleados\nINNER JOIN departamentos ON empleados.departamento = departamentos.id\nGROUP BY empleados.nombre, departamentos.nombre;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Esta consulta selecciona el nombre de los empleados, el nombre de su departamento y el salario promedio de los empleados en ese departamento. Utiliza un ",(0,l.jsx)(a.code,{children:"INNER JOIN"})," para combinar las tablas ",(0,l.jsx)(a.code,{children:"empleados"})," y ",(0,l.jsx)(a.code,{children:"departamentos"}),", y luego agrupa los resultados por el nombre del empleado y el nombre del departamento para calcular el salario promedio."]}),"\n",(0,l.jsxs)(a.h2,{id:"primary-keys-y-foreign-keys",children:[(0,l.jsx)(a.em,{children:"Primary Keys"})," y ",(0,l.jsx)(a.em,{children:"Foreign Keys"})]}),"\n",(0,l.jsxs)(a.p,{children:["En SQL, las ",(0,l.jsx)(a.em,{children:"primary keys"})," (claves primarias) y ",(0,l.jsx)(a.em,{children:"foreign keys"})," (claves for\xe1neas) son conceptos fundamentales para establecer relaciones entre tablas y garantizar la integridad de los datos."]}),"\n",(0,l.jsx)(a.h3,{id:"primary-keys-claves-primarias",children:"Primary Keys (Claves Primarias)"}),"\n",(0,l.jsxs)(a.p,{children:["Una ",(0,l.jsx)(a.em,{children:(0,l.jsx)(a.strong,{children:"primary key"})})," es una columna o conjunto de columnas que identifica de manera \xfanica cada fila en una tabla. No puede contener valores nulos y debe ser \xfanica para cada registro. Se utiliza para garantizar que no haya duplicados en la tabla y para establecer relaciones con otras tablas."]}),"\n",(0,l.jsxs)(a.p,{children:["Por ejemplo, en la tabla ",(0,l.jsx)(a.code,{children:"empleados"}),", la columna ",(0,l.jsx)(a.code,{children:"id"})," podr\xeda ser definida como la clave primaria:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"CREATE TABLE empleados (\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(50),\n    departamento VARCHAR(50),\n    salario DECIMAL(10, 2)\n);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["En este caso, la columna ",(0,l.jsx)(a.code,{children:"id"})," es de tipo ",(0,l.jsx)(a.code,{children:"SERIAL"}),", lo que significa que se generar\xe1 autom\xe1ticamente un valor \xfanico para cada nuevo registro insertado en la tabla. Esto asegura que cada empleado tenga un identificador \xfanico, y por lo tanto, dos empleados distintos no podr\xe1n tener el mismo ",(0,l.jsx)(a.code,{children:"id"}),"."]}),"\n",(0,l.jsx)(a.h3,{id:"foreign-keys-claves-for\xe1neas",children:"Foreign Keys (Claves For\xe1neas)"}),"\n",(0,l.jsxs)(a.p,{children:["Una ",(0,l.jsx)(a.em,{children:(0,l.jsx)(a.strong,{children:"foreign key"})})," es una columna o conjunto de columnas en una tabla que hace referencia a la ",(0,l.jsx)(a.em,{children:(0,l.jsx)(a.strong,{children:"primary key"})})," de otra tabla. Se utiliza para establecer y reforzar la relaci\xf3n entre las dos tablas. Las claves for\xe1neas permiten la comunicaci\xf3n entre tablas, asegurando que los valores en la columna de la clave for\xe1nea coincidan con los valores en la columna de la clave primaria de la tabla referenciada. Es decir, que de alguna manera ",(0,l.jsx)(a.strong,{children:"una clave for\xe1nea en una tabla apunta a una clave primaria en otra tabla"}),"."]}),"\n",(0,l.jsxs)(a.p,{children:["Por ejemplo, si tenemos una tabla ",(0,l.jsx)(a.code,{children:"departamentos"})," y queremos establecer una relaci\xf3n entre los empleados y sus departamentos, podemos definir la columna ",(0,l.jsx)(a.code,{children:"departamento"})," en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," como una clave for\xe1nea que hace referencia a la columna ",(0,l.jsx)(a.code,{children:"id"})," en la tabla ",(0,l.jsx)(a.code,{children:"departamentos"}),":"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-sql",children:"CREATE TABLE departamentos (\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(50)\n);\n\nCREATE TABLE empleados (\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(50),\n    departamento INT,\n    salario DECIMAL(10, 2),\n    FOREIGN KEY (depto_id) REFERENCES departamentos(id)\n);\n"})}),"\n",(0,l.jsxs)(a.p,{children:["En este caso, la columna ",(0,l.jsx)(a.code,{children:"depto_id"})," en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," es una clave for\xe1nea que hace referencia a la columna ",(0,l.jsx)(a.code,{children:"id"})," en la tabla ",(0,l.jsx)(a.code,{children:"departamentos"}),". Esto significa que cada empleado debe pertenecer a un departamento existente, y no se permitir\xe1 insertar un registro en la tabla ",(0,l.jsx)(a.code,{children:"empleados"})," con un valor de ",(0,l.jsx)(a.code,{children:"depto_id"})," que no exista en la tabla ",(0,l.jsx)(a.code,{children:"departamentos"}),"."]}),"\n",(0,l.jsxs)(a.p,{children:["A su vez, la generaci\xf3n de esta ",(0,l.jsx)(a.em,{children:"foreign key"})," garantiza que la tabla de empleados pueda relacionarse de forma directa con la tabla de departamentos, permitiendo realizar consultas que combinen datos de ambas tablas de manera efectiva."]})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(t,{...e})}):t(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>d,x:()=>r});var s=n(6540);const l={},o=s.createContext(l);function d(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);