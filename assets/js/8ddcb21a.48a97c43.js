"use strict";(self.webpackChunkaninfo_web_catedra=self.webpackChunkaninfo_web_catedra||[]).push([[2858],{3125:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"Material/Apuntes/git","title":"Git y GitHub","description":"Importante: Antes de comenzar a trabajar con repositorios remotos, se debe configurar la SSH Key. En la secci\xf3n \\"Apuntes\\" hay un tutorial detallado.","source":"@site/docs/Material/Apuntes/git.md","sourceDirName":"Material/Apuntes","slug":"/Material/Apuntes/git","permalink":"/web/docs/Material/Apuntes/git","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n a Docker","permalink":"/web/docs/Material/Apuntes/docker"},"next":{"title":"Ingenier\xeda de Software","permalink":"/web/docs/Material/Apuntes/ing_software"}}');var a=o(4848),r=o(8453);const n={},c="Git y GitHub",l={},t=[{value:"Repositorios en Git",id:"repositorios-en-git",level:2},{value:"\xbfQu\xe9 es un Repositorio?",id:"qu\xe9-es-un-repositorio",level:3},{value:"Seguimiento de cambios con commits en Git",id:"seguimiento-de-cambios-con-commits-en-git",level:2},{value:"\xbfQu\xe9 es un commit?",id:"qu\xe9-es-un-commit",level:3},{value:"Colaborando en repositorios remotos",id:"colaborando-en-repositorios-remotos",level:2},{value:"Issues",id:"issues",level:2},{value:"Pull requests (PR)",id:"pull-requests-pr",level:2},{value:"Branches (ramas)",id:"branches-ramas",level:2},{value:"Merge conflicts",id:"merge-conflicts",level:2},{value:"Archivos <code>.gitignore</code>",id:"archivos-gitignore",level:2},{value:"Estados de un archivo",id:"estados-de-un-archivo",level:2},{value:"Transici\xf3n entre Estados",id:"transici\xf3n-entre-estados",level:3},{value:"Comandos b\xe1sicos de Git por tema",id:"comandos-b\xe1sicos-de-git-por-tema",level:2},{value:"1. Configuraci\xf3n Inicial",id:"1-configuraci\xf3n-inicial",level:3},{value:"2. Inicializaci\xf3n de Repositorio",id:"2-inicializaci\xf3n-de-repositorio",level:3},{value:"3. Rastrear Archivos",id:"3-rastrear-archivos",level:3},{value:"4. Stash (Guardar Cambios Temporales)",id:"4-stash-guardar-cambios-temporales",level:2},{value:"5. Confirmaci\xf3n de Cambios (Commits)",id:"5-confirmaci\xf3n-de-cambios-commits",level:2},{value:"6. Historial",id:"6-historial",level:2},{value:"7. Sincronizaci\xf3n con Repositorios Remotos",id:"7-sincronizaci\xf3n-con-repositorios-remotos",level:2},{value:"8. Ramas (Branches)",id:"8-ramas-branches",level:2},{value:"9. Restaurar Cambios (Restore)",id:"9-restaurar-cambios-restore",level:2},{value:"10. Deshacer Cambios",id:"10-deshacer-cambios",level:2},{value:"11. Clonaci\xf3n",id:"11-clonaci\xf3n",level:2},{value:"12. Etiquetas (Tags)",id:"12-etiquetas-tags",level:2},{value:"13. Ver Cambios",id:"13-ver-cambios",level:2}];function d(e){const i={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"git-y-github",children:"Git y GitHub"})}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Importante"}),': Antes de comenzar a trabajar con repositorios remotos, se debe configurar la SSH Key. En la secci\xf3n "Apuntes" hay un tutorial detallado.']}),"\n",(0,a.jsxs)(i.p,{children:["Git es un software muy importante a la hora de desarrollar, ya que nos permite controlar las versiones de los archivos de nuestro proyecto. Siendo una ",(0,a.jsx)(i.strong,{children:"versi\xf3n"})," el estado del archivo despu\xe9s de realizar un conjunto de cambios. Por ejemplo, cuando se trabaja en un archivo, se hacen modificaciones y, una vez terminado ese ciclo de trabajo, se genera una nueva versi\xf3n. M\xe1s tarde, si se realizan correcciones o nuevas modificaciones, se genera otra versi\xf3n. Este proceso es esencial para manejar de forma organizada los cambios en nuestro proyecto."]}),"\n",(0,a.jsx)(i.p,{children:"Incluso nos permite trabajar con control de versiones de manera local en nuestra computadora, sin necesidad de estar conectado a un servidor remoto. Esto significa que podemos mantener un registro detallado y organizado de todo lo que ocurre en nuestros archivos, asegurando que cada cambio est\xe9 documentado y pueda ser recuperado en cualquier momento."}),"\n",(0,a.jsxs)(i.p,{children:["Por otro lado, GitHub es una ",(0,a.jsx)(i.strong,{children:"plataforma"})," de alojamiento de repositorios Git y colaboraci\xf3n en l\xednea que ",(0,a.jsx)(i.strong,{children:"utiliza Git"})," como sistema de control de versiones. Permite a los desarrolladores almacenar y gestionar sus proyectos en l\xednea, facilitando la colaboraci\xf3n y la integraci\xf3n continua. Los usuarios pueden crear repositorios remotos que pueden ser accesibles por otros miembros del equipo o por cualquier usuario en general, dependiendo de la configuraci\xf3n de privacidad del repositorio."]}),"\n",(0,a.jsx)(i.h2,{id:"repositorios-en-git",children:"Repositorios en Git"}),"\n",(0,a.jsxs)(i.p,{children:["Un ",(0,a.jsx)(i.strong,{children:"repositorio"})," en Git es un espacio donde se almacena todo el historial de cambios de un proyecto. Act\xfaa como una base de datos que contiene toda la informaci\xf3n necesaria para reconstruir el proyecto en cualquier estado previo."]}),"\n",(0,a.jsx)(i.h3,{id:"qu\xe9-es-un-repositorio",children:"\xbfQu\xe9 es un Repositorio?"}),"\n",(0,a.jsx)(i.p,{children:"Un repositorio en Git es un contenedor que guarda el c\xf3digo fuente de un proyecto, junto con todos sus archivos y directorios, as\xed como el historial de versiones de esos archivos. Existen dos tipos de repositorios en Git:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Repositorio Local"}),": Es la versi\xf3n del repositorio que resides en tu propia computadora. Incluye todos los archivos del proyecto y el historial completo de commits. Puedes realizar cambios, hacer commits y gestionar ramas localmente sin necesidad de estar conectado a un servidor remoto."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Repositorio Remoto"}),": Es la versi\xf3n del repositorio que se encuentra en un servidor accesible a trav\xe9s de Internet o una red local. Los repositorios remotos permiten colaborar con otros desarrolladores, compartir cambios y mantener una copia centralizada del proyecto. Los ejemplos m\xe1s comunes incluyen plataformas como GitHub, GitLab y Bitbucket."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"seguimiento-de-cambios-con-commits-en-git",children:"Seguimiento de cambios con commits en Git"}),"\n",(0,a.jsxs)(i.p,{children:["En Git, los ",(0,a.jsx)(i.strong,{children:"commits"})," son fundamentales para el seguimiento y la gesti\xf3n de versiones de tus archivos."]}),"\n",(0,a.jsx)(i.h3,{id:"qu\xe9-es-un-commit",children:"\xbfQu\xe9 es un commit?"}),"\n",(0,a.jsxs)(i.p,{children:["Un ",(0,a.jsx)(i.strong,{children:"commit"})," en Git es una instant\xe1nea del estado de los archivos en tu repositorio en un momento espec\xedfico. Cuando realizas un commit, Git guarda la informaci\xf3n sobre todos los archivos que has modificado, agregado o eliminado, junto con un mensaje descriptivo que explica los cambios realizados. Cada commit tiene un identificador \xfanico (hash) que lo distingue de otros commits en el historial."]}),"\n",(0,a.jsxs)(i.p,{children:["Es muy importante que el mensaje que est\xe9 dentro del commit sea ",(0,a.jsx)(i.strong,{children:"descriptivo, claro y \xfatil"}),", ya que esto ayudar\xe1 a que todo aquel que participe del proyecto comprenda claramente cu\xe1l fue el cambio realizado en los archivos del mismo. Un buen mensaje tiene como objetivo que se entienda r\xe1pidamente la modificaci\xf3n realizada sin necesidad de analizar el c\xf3digo en detalle, por lo que tiene que contener los cambios realizados, y en algunos casos el por qu\xe9 de los mismos y c\xf3mo afectan al proyecto."]}),"\n",(0,a.jsx)(i.h2,{id:"colaborando-en-repositorios-remotos",children:"Colaborando en repositorios remotos"}),"\n",(0,a.jsx)(i.p,{children:"Una vez realizados los cambios en tu repositorio local y hechos los commits necesarios, estos pueden ser subidos a un repositorio remoto para continuar siendo trabajados por tu equipo."}),"\n",(0,a.jsx)(i.h2,{id:"issues",children:"Issues"}),"\n",(0,a.jsx)(i.p,{children:"Son una herramienta utilizada para registrar, rastrear y gestionar tareas, errores o solicitudes de nuevas funcionalidades en un proyecto. Cada issue puede contener una descripci\xf3n detallada, etiquetas, asignaciones y comentarios, son \xfatiles para organizar el trabajo, coordinar el desarrollo, alertar de errores y planificar cambios o arreglos. Generalmente se resuelven en un pull request, donde tambi\xe9n puede marcarse su cierre."}),"\n",(0,a.jsx)(i.h2,{id:"pull-requests-pr",children:"Pull requests (PR)"}),"\n",(0,a.jsx)(i.p,{children:"Es una solicitud para fusionar cambios de una rama (branch) a otra (generalmente la rama \u201cmain\u201d o \u201cmaster\u201d) en un repositorio remoto. Cuando creas un pull request, est\xe1s pidiendo que revisen y, si es aprobado, integren los cambios que realizaste en una rama (por ejemplo, una rama de caracter\xedsticas) a una rama principal. Los pull requests permiten revisar el c\xf3digo, discutir los cambios y asegurarse de que son apropiados para el proyecto antes de integrar las modificaciones."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://www.freecodecamp.org/espanol/news/como-hacer-tu-primer-pull-request-en-github/",children:"C\xf3mo hacer tu primer pull request en GitHub"})}),"\n",(0,a.jsx)(i.h2,{id:"branches-ramas",children:"Branches (ramas)"}),"\n",(0,a.jsx)(i.p,{children:"Nos permiten trabajar en diferentes versiones del proyecto simult\xe1neamente. Al crear una rama, se pueden desarrollar nuevas funcionalidades o realizar cambios sin afectar a la rama principal del proyecto (main). Una vez que los cambios a realizar en la rama est\xe9n listos, pueden fusionarse usando un PR. Es importante utilizarlas ya que evitan interferir el trabajo de otros y desarrollar nuevos features o efectuar modificaciones de manera organizada y sin posibilidad de \u201cromper\u201d la rama principal."}),"\n",(0,a.jsx)(i.h2,{id:"merge-conflicts",children:"Merge conflicts"}),"\n",(0,a.jsx)(i.p,{children:"Ocurre cuando Git no puede fusionar autom\xe1ticamente los cambios de dos ramas porque hay conflictos entre las modificaciones realizadas en cada rama. Para resolver un merge conflict, necesitas abrir el archivo en conflicto en un editor de texto y resolver manualmente las diferencias entre las versiones en conflicto. Esto implica decidir qu\xe9 cambios mantener, qu\xe9 cambios descartar y c\xf3mo combinar los cambios de manera coherente."}),"\n",(0,a.jsxs)(i.p,{children:["Una vez resueltos los conflictos, se deben agregar los archivos modificados al \xe1rea de staging con ",(0,a.jsx)(i.code,{children:"git add"})," y luego hacer un commit para completar la fusi\xf3n."]}),"\n",(0,a.jsxs)(i.p,{children:["El comando ",(0,a.jsx)(i.code,{children:"git merge"})," se utiliza para fusionar ramas, pero cuando se encuentra con un conflicto, necesitas resolverlo manualmente como se describi\xf3 anteriormente."]}),"\n",(0,a.jsxs)(i.h2,{id:"archivos-gitignore",children:["Archivos ",(0,a.jsx)(i.code,{children:".gitignore"})]}),"\n",(0,a.jsxs)(i.p,{children:["Un archivo ",(0,a.jsx)(i.code,{children:".gitignore"})," es un archivo especial en un repositorio de Git que se utiliza para especificar patrones de archivos o directorios que Git debe ignorar. Esto significa que los archivos y directorios que coincidan con los patrones especificados en el archivo ",(0,a.jsx)(i.code,{children:".gitignore"})," no se incluir\xe1n en los cambios que Git rastrea o en los commits que se realizan en el repositorio."]}),"\n",(0,a.jsx)(i.p,{children:"Este archivo es \xfatil para evitar que se agreguen al repositorio archivos generados autom\xe1ticamente, archivos de compilaci\xf3n, archivos temporales y otros archivos que no son necesarios para el proyecto o que no deben ser versionados."}),"\n",(0,a.jsx)(i.h2,{id:"estados-de-un-archivo",children:"Estados de un archivo"}),"\n",(0,a.jsx)(i.p,{children:'En Git, el concepto de "estados" se refiere a las diferentes etapas en las que puede encontrarse un archivo a medida que se trabaja en un repositorio. Estos estados reflejan el ciclo de vida de los archivos desde que son modificados hasta que son confirmados en el historial del proyecto.'}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Untracked (No Rastreado)"}),(0,a.jsx)(i.br,{}),"\n","Descripci\xf3n: El archivo est\xe1 en el directorio de trabajo, pero Git no lo est\xe1 siguiendo. Es decir, Git no tiene conocimiento de este archivo y no est\xe1 incluido en el historial del repositorio."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Tracked (Rastreado)"}),(0,a.jsx)(i.br,{}),"\n","Descripci\xf3n: El archivo ha sido a\xf1adido al repositorio en un commit anterior. Git est\xe1 siguiendo este archivo y su estado puede ser uno de los siguientes:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Unmodified (Sin Modificar)"}),": El archivo ha sido rastreado previamente y no se han realizado cambios desde el \xfaltimo commit."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Modified (Modificado)"}),": El archivo ha sido cambiado despu\xe9s del \xfaltimo commit. Los cambios a\xfan no han sido a\xf1adidos al \xe1rea de staging."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Staged (En \xc1rea de Staging)"}),": El archivo ha sido modificado y sus cambios han sido a\xf1adidos al \xe1rea de staging (preparado para el pr\xf3ximo commit)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Staged (En \xc1rea de Staging)"}),(0,a.jsx)(i.br,{}),"\n","Descripci\xf3n: El archivo est\xe1 en el \xe1rea de staging, lo que significa que los cambios han sido preparados para ser incluidos en el pr\xf3ximo commit. Es decir, Git ha marcado los cambios para que se incluyan en el historial del repositorio."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"transici\xf3n-entre-estados",children:"Transici\xf3n entre Estados"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["De ",(0,a.jsx)(i.strong,{children:"Untracked"})," a ",(0,a.jsx)(i.strong,{children:"Staged"}),":",(0,a.jsx)(i.br,{}),"\n","Usas ",(0,a.jsx)(i.code,{children:"git add"})," para a\xf1adir archivos no rastreados al \xe1rea de staging."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["De ",(0,a.jsx)(i.strong,{children:"Modified"})," a ",(0,a.jsx)(i.strong,{children:"Staged"}),":",(0,a.jsx)(i.br,{}),"\n","Usas ",(0,a.jsx)(i.code,{children:"git add"})," para a\xf1adir los cambios en archivos modificados al \xe1rea de staging."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["De ",(0,a.jsx)(i.strong,{children:"Staged"})," a ",(0,a.jsx)(i.strong,{children:"Committed"}),":",(0,a.jsx)(i.br,{}),"\n","Usas ",(0,a.jsx)(i.code,{children:"git commit"})," para hacer un commit de los archivos en el \xe1rea de staging. Esto confirma los cambios en el repositorio."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:["De ",(0,a.jsx)(i.strong,{children:"Staged"})," a ",(0,a.jsx)(i.strong,{children:"Unstaged"}),":",(0,a.jsx)(i.br,{}),"\n","Usas ",(0,a.jsx)(i.code,{children:"git reset"})," para retirar archivos del \xe1rea de staging, devolvi\xe9ndolos al estado de modificados."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"comandos-b\xe1sicos-de-git-por-tema",children:"Comandos b\xe1sicos de Git por tema"}),"\n",(0,a.jsx)(i.h3,{id:"1-configuraci\xf3n-inicial",children:"1. Configuraci\xf3n Inicial"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:'git config --global user.name "Tu Nombre"'}),": Configura tu nombre de usuario globalmente."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:'git config --global user.email "tu.email@dominio.com"'}),": Configura tu correo electr\xf3nico globalmente."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git config --list"}),": Muestra la configuraci\xf3n actual."]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"2-inicializaci\xf3n-de-repositorio",children:"2. Inicializaci\xf3n de Repositorio"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git init"}),": Crea un nuevo repositorio Git en el directorio actual."]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"3-rastrear-archivos",children:"3. Rastrear Archivos"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git add <archivo>"}),": A\xf1ade un archivo al \xe1rea de preparaci\xf3n (staging area)."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git add ."}),": A\xf1ade todos los archivos modificados al \xe1rea de preparaci\xf3n."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git status"}),": Muestra el estado de los archivos en el repositorio (rastreados, modificados, en staging, etc.)."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git rm --cached <archivo>"}),": Elimina un archivo del \xe1rea de staging sin eliminarlo del directorio de trabajo."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"4-stash-guardar-cambios-temporales",children:"4. Stash (Guardar Cambios Temporales)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash"}),": Guarda los cambios no confirmados temporalmente."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash -u"}),": Guarda cambios no confirmados y archivos no rastreados."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash list"}),": Muestra la lista de stashes guardados."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash apply"}),": Aplica el \xfaltimo stash guardado sin eliminarlo de la lista."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash pop"}),": Aplica el \xfaltimo stash y lo elimina de la lista."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash drop"}),": Elimina el \xfaltimo stash guardado."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git stash clear"}),": Elimina todos los stashes guardados."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"5-confirmaci\xf3n-de-cambios-commits",children:"5. Confirmaci\xf3n de Cambios (Commits)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:'git commit -m "Mensaje de commit"'}),": Guarda los cambios en el repositorio con un mensaje descriptivo."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git commit --amend"}),": Modifica el \xfaltimo commit realizado (por ejemplo, para corregir el mensaje)."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"6-historial",children:"6. Historial"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git log"}),": Muestra el historial de commits."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git log --oneline"}),": Muestra el historial de commits en una sola l\xednea por commit."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"7-sincronizaci\xf3n-con-repositorios-remotos",children:"7. Sincronizaci\xf3n con Repositorios Remotos"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git remote add origin <url>"}),": Asocia el repositorio local con uno remoto."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git push origin <nombre-rama>"}),": Sube los cambios locales en la rama actual al repositorio remoto."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git pull origin <nombre-rama>"}),": Trae los cambios de una rama remota al local y los fusiona."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"8-ramas-branches",children:"8. Ramas (Branches)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git branch"}),": Muestra las ramas actuales."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git branch <nombre-rama>"}),": Crea una nueva rama."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git checkout <nombre-rama>"}),": Cambia a una rama diferente."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git checkout -b <nombre-rama>"}),": Crea y cambia a una nueva rama."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git merge <nombre-rama>"}),": Fusiona la rama especificada con la rama actual. (Por ejemplo, el main con la branch actual)"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git branch --set-upstream-to=origin/<rama>"}),": Establece la rama remota de seguimiento para la rama actual."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"9-restaurar-cambios-restore",children:"9. Restaurar Cambios (Restore)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git restore <archivo>"}),": Deshace los cambios locales no confirmados en el archivo, restaur\xe1ndolo a la versi\xf3n del \xfaltimo commit."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git restore --staged <archivo>"}),": Quita un archivo del \xe1rea de preparaci\xf3n sin perder los cambios locales."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git restore --source=<commit> <archivo>"}),": Restaura un archivo a su estado en un commit espec\xedfico."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git restore ."}),": Deshace los cambios no confirmados en todos los archivos del directorio actual."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"10-deshacer-cambios",children:"10. Deshacer Cambios"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git reset <archivo>"}),": Elimina un archivo del \xe1rea de preparaci\xf3n."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git reset --hard"}),": Revierte el repositorio al \xfaltimo commit, descartando todos los cambios."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git checkout -- <archivo>"}),": Deshace los cambios en un archivo que a\xfan no ha sido a\xf1adido al \xe1rea de preparaci\xf3n."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"11-clonaci\xf3n",children:"11. Clonaci\xf3n"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git clone <url>"}),": Clona un repositorio remoto en el directorio local."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"12-etiquetas-tags",children:"12. Etiquetas (Tags)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git tag <nombre-etiqueta>"}),": Crea una nueva etiqueta."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git tag"}),": Muestra todas las etiquetas."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git push origin <nombre-etiqueta>"}),": Sube una etiqueta al repositorio remoto."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"13-ver-cambios",children:"13. Ver Cambios"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git diff"}),": Muestra las diferencias entre los archivos modificados pero no preparados para commit."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"git diff --staged"}),": Muestra las diferencias entre los archivos preparados para commit y el \xfaltimo commit."]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,i,o)=>{o.d(i,{R:()=>n,x:()=>c});var s=o(6540);const a={},r=s.createContext(a);function n(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);